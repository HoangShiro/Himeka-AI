import asyncio
import discord
from discord.ext import commands, tasks
from discord.ui import View, button
import json, os

from user_files.config import *
from utils.ai_api import *
from utils.funcs import *

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

ai_name = "Himeka"
ai_last = "Shindou"
ai_full_name = f"{ai_name} {ai_last}"

# Vals.json
bot_mood = 50
chat_log = False
cds_log = True
st_log = False

default_values = {
    "bot_mood": 50.0,
    "chat_log": False,
    "cds_log": True,
    "st_log": False
}

# Ki·ªÉm tra xem t·ªáp JSON c√≥ t·ªìn t·∫°i kh√¥ng
try:
    with open('user_files/vals.json', 'r', encoding="utf-8") as file:
        data3 = json.load(file)
except FileNotFoundError:
    with open('user_files/vals.json', 'w', encoding="utf-8") as file:
        json.dump(default_values, file)
    # N·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
    data3 = default_values

# G√°n gi√° tr·ªã t·ª´ data cho c√°c bi·∫øn hi·ªán t·∫°i
for key, value in default_values.items():
    globals()[key] = data3.get(key, value)

    # D·ª´ng sau khi ƒë√£ duy·ªát qua t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ trong default_values
    if key == list(default_values.keys())[-1]:
        break

# Ki·ªÉm tra v√† th√™m bi·∫øn thi·∫øu v√†o t·ªáp JSON n·∫øu c·∫ßn
for key, value in default_values.items():
    if key not in data3:
        data3[key] = value

# C·∫≠p nh·∫≠t t·ªáp JSON v·ªõi c√°c bi·∫øn m·ªõi n·∫øu c√≥
with open('user_files/vals.json', 'w', encoding="utf-8") as file:
    json.dump(data3, file)

@bot.event
async def on_ready():
    # ƒê·ªìng b·ªô ho√° commands
    try:
        synced = await bot.tree.sync()
        print(f"ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh.")
    except Exception as e:
        print(e)
    print("Himeka ƒë√£ kh·ªüi ƒë·ªông")

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    # Ph·∫£n h·ªìi chat
    if message.content:
        user_name = message.author.nick
        if not user_name:
            user_name = message.author.name
        umess = "{}: {}".format(user_name, message.content)
        print(umess)
        async with message.channel.typing():
            answ, ain = await CAI(umess)
            print(f"{ain}: {answ}")
            print()
            await message.reply(answ)
    
    return

# C√°c c√¢u l·ªánh
@bot.tree.command(name="renew", description=f"Kh·ªüi ƒë·ªông l·∫°i {ai_name}.")
async def renew(interaction: discord.Interaction):
    await interaction.response.send_message(f"{ai_name} s·∫Ω s·ªõm quay l·∫°i n√®~!", ephemeral=True)
    await bot.close()

@bot.tree.command(name="newchat", description="Cu·ªôc tr√≤ chuy·ªán m·ªõi.")
async def newchat(interaction: discord.Interaction):
    iuser = interaction.user.name
    await interaction.response.send_message(f"*ƒê√£ quay ng∆∞·ª£c th·ªùi gian l√∫c {ai_name} m·ªõi tham gia NekoArt Studio... üïí*")
    await CAc.chat.new_chat(c_token)
    print(f"[NEW CHAT]: {iuser}")
    print()

@bot.tree.command(name="clogs", description=f"Toggle console log.")
async def chatlog(interaction: discord.Interaction, chat: bool = False, command: bool = True, status: bool = False):
    global chat_log, cds_log, st_log
    if interaction.user.id == owner_id:
        chat_log = chat
        cds_log = command
        st_log = status
        await interaction.response.send_message(f"`Log chat ra console ƒë√£ ƒë∆∞·ª£c {case}`", ephemeral=True)
        vals_save('user_files/vals.json', 'chat_log', chat_log)
        vals_save('user_files/vals.json', 'cds_log', cds_log)
        vals_save('user_files/vals.json', 'st_log', st_log)
    else:
        await interaction.response.send_message(f"`Ch·ªâ {ai_name}'s DEV m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.`", ephemeral=True)

def bot_run():
    bot.run(discord_bot_key)

if __name__ == '__main__':
    bot_run()